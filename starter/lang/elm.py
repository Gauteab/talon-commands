from functools import reduce
from talon.voice import Context, Key, Str
from ..utils import is_filetype, insert, text, join_words
from ...community_utils import camel_text
from ...enabler import is_enabled, ToggleContext
from talon import fs

# # Modules:
# Array, Basics, Bitwise, Char, Debug, Dict, List, Maybe, Platform, Platform.Cmd, Platform.Sub, Process, Result, Set, String, Task, Tuple
# # Types:
# Array, Bool, Float, Int, Never, Order, Char, Dict, Maybe, ProcessId, Program, Router, Task, Cmd, Sub, Id, Result, Set, String, Task
types = {s: s for s in ["Tuple", "List", "Maybe", "Result",
                        "Parser", "String", "Int", "Tree", "Zipper", "Bool", "Tree"]}
types.update({"hint": "Int"})

functions = "model column row".split()

# ctx = ToggleContext("elm", func=is_enabled("elm"))
ctx  = ToggleContext("elm", func=is_filetype(("elm",)))

ctx.set_list("types", types)
ctx.set_list("functions", functions)
ctx.keymap(
    {
        "define <dgndictation> [over]": [camel_text, " = "],
        "{elm.types} to ": lambda m: insert(types[m[0]] + " -> "),
        "{lsp.Enum} to ": lambda m: insert(m[0] + " -> "),
        "{elm.types} to {elm.types}": lambda m: insert(types[m[0]] + " -> " + types[m[2]]),
        "{elm.types} of": lambda m: insert(types[m[0]] + " "),
        "{elm.types} dot": lambda m: insert(types[m[0]] + "."),
        "{names.modules} dot": lambda m: insert(m[0] + "."),
        "call {lsp.Function}": lambda m: insert(m[1] + " "),
        "{lsp.Function}": lambda m: insert(m[0] + " "),



        "import everything": ["import  exposing (..)"] + [Key("left")]*14,
        "case of": ["case  of"] + [Key("left")]*3,
        "new type": ["type  ="] + [Key("left")]*2,
        "type alias": ["type alias  ="] + [Key("left")]*2,
        "pizza right": " |> ",
        "pizza left": " <| ",
        "wildcard": " _ ",

        "debug to do": ["Debug.todo \"\"", Key("left")],
        "debug to string": "Debug.toString ",
        "debug log": "Debug.log \"\" ",

        "name {elm.functions}": lambda m: insert(m[1] + " "),
        "call {names.names}": lambda m: insert(m[1] + " "),
        "default branch": "_ -> Debug.todo \"\"",
        "return default": "(model, Cmd.none)",

        # Core:
        "Array append": "Array.append ",
        "Array empty": "Array.empty ",
        "Array filter": "Array.filter ",
        "Array foldl": "Array.foldl ",
        "Array foldr": "Array.foldr ",
        "Array fromList": "Array.fromList ",
        "Array get": "Array.get ",
        "Array indexedMap": "Array.indexedMap ",
        "Array initialize": "Array.initialize ",
        "Array isEmpty": "Array.isEmpty ",
        "Array length": "Array.length ",
        "Array map": "Array.map ",
        "Array push": "Array.push ",
        "Array repeat": "Array.repeat ",
        "Array set": "Array.set ",
        "Array slice": "Array.slice ",
        "Array toIndexedList": "Array.toIndexedList ",
        "Array toList": "Array.toList ",
        "Basic abs": "abs ",
        "Basic acos": "acos ",
        "Basic always": "always ",
        "Basic asin": "asin ",
        "Basic atan": "atan ",
        "Basic atan2": "atan2 ",
        "Basic ceiling": "ceiling ",
        "Basic clamp": "clamp ",
        "Basic compare": "compare ",
        "Basic cos": "cos ",
        "Basic degrees": "degrees ",
        "Basic e": "e ",
        "Basic floor": "floor ",
        "Basic fromPolar": "fromPolar ",
        "Basic identity": "identity ",
        "Basic isInfinite": "isInfinite ",
        "Basic isNaN": "isNaN ",
        "Basic logBase": "logBase ",
        "Basic max": "max ",
        "Basic min": "min ",
        "Basic modBy": "modBy ",
        "Basic negate": "negate ",
        "Basic never": "never ",
        "Basic not": "not ",
        "Basic pi": "pi ",
        "Basic radians": "radians ",
        "Basic remainderBy": "remainderBy ",
        "Basic round": "round ",
        "Basic sin": "sin ",
        "Basic sqrt": "sqrt ",
        "Basic tan": "tan ",
        "Basic toFloat": "toFloat ",
        "Basic toPolar": "toPolar ",
        "Basic truncate": "truncate ",
        "Basic turns": "turns ",
        "Basic xor": "xor ",
        "Basic True": "True ",
        "Basic False": "False ",
        "Basic LT": "LT ",
        "Basic EQ": "EQ ",
        "Basic GT": "GT ",
        "Bitwise and": "Bitwise.and ",
        "Bitwise complement": "Bitwise.complement ",
        "Bitwise or": "Bitwise.or ",
        "Bitwise shiftLeftBy": "Bitwise.shiftLeftBy ",
        "Bitwise shiftRightBy": "Bitwise.shiftRightBy ",
        "Bitwise shiftRightZfBy": "Bitwise.shiftRightZfBy ",
        "Bitwise xor": "Bitwise.xor ",
        "Char fromCode": "Char.fromCode ",
        "Char isAlpha": "Char.isAlpha ",
        "Char isAlphaNum": "Char.isAlphaNum ",
        "Char isDigit": "Char.isDigit ",
        "Char isHexDigit": "Char.isHexDigit ",
        "Char isLower": "Char.isLower ",
        "Char isOctDigit": "Char.isOctDigit ",
        "Char isUpper": "Char.isUpper ",
        "Char toCode": "Char.toCode ",
        "Char toLocaleLower": "Char.toLocaleLower ",
        "Char toLocaleUpper": "Char.toLocaleUpper ",
        "Char toLower": "Char.toLower ",
        "Char toUpper": "Char.toUpper ",
        "Debug log": "Debug.log ",
        "Debug toString": "Debug.toString ",
        "Debug todo": "Debug.todo ",
        "Dick diff": "Dict.diff ",
        "Dick empty": "Dict.empty ",
        "Dick filter": "Dict.filter ",
        "Dick foldl": "Dict.foldl ",
        "Dick foldr": "Dict.foldr ",
        "Dick fromList": "Dict.fromList ",
        "Dick get": "Dict.get ",
        "Dick insert": "Dict.insert ",
        "Dick intersect": "Dict.intersect ",
        "Dick isEmpty": "Dict.isEmpty ",
        "Dick keys": "Dict.keys ",
        "Dick map": "Dict.map ",
        "Dick member": "Dict.member ",
        "Dick merge": "Dict.merge ",
        "Dick partition": "Dict.partition ",
        "Dick remove": "Dict.remove ",
        "Dick singleton": "Dict.singleton ",
        "Dick size": "Dict.size ",
        "Dick toList": "Dict.toList ",
        "Dick union": "Dict.union ",
        "Dick update": "Dict.update ",
        "Dick values": "Dict.values ",
        "List all": "List.all ",
        "List any": "List.any ",
        "List append": "List.append ",
        "List concat": "List.concat ",
        "List concatMap": "List.concatMap ",
        "List drop": "List.drop ",
        "List filter": "List.filter ",
        "List filterMap": "List.filterMap ",
        "List foldl": "List.foldl ",
        "List foldr": "List.foldr ",
        "List head": "List.head ",
        "List indexedMap": "List.indexedMap ",
        "List intersperse": "List.intersperse ",
        "List isEmpty": "List.isEmpty ",
        "List length": "List.length ",
        "List map": "List.map ",
        "List map2": "List.map2 ",
        "List map3": "List.map3 ",
        "List map4": "List.map4 ",
        "List map5": "List.map5 ",
        "List maximum": "List.maximum ",
        "List member": "List.member ",
        "List minimum": "List.minimum ",
        "List partition": "List.partition ",
        "List product": "List.product ",
        "List range": "List.range ",
        "List repeat": "List.repeat ",
        "List reverse": "List.reverse ",
        "List singleton": "List.singleton ",
        "List sort": "List.sort ",
        "List sortBy": "List.sortBy ",
        "List sortWith": "List.sortWith ",
        "List sum": "List.sum ",
        "List tail": "List.tail ",
        "List take": "List.take ",
        "List unzip": "List.unzip ",
        "Maybe andThen": "Maybe.andThen ",
        "Maybe map": "Maybe.map ",
        "Maybe map2": "Maybe.map2 ",
        "Maybe map3": "Maybe.map3 ",
        "Maybe map4": "Maybe.map4 ",
        "Maybe map5": "Maybe.map5 ",
        "Maybe withDefault": "Maybe.withDefault ",
        "Maybe Just": "Just ",
        "Maybe Nothing": "Nothing ",
        "Platform sendToApp": "Platform.sendToApp ",
        "Platform sendToSelf": "Platform.sendToSelf ",
        "Platform worker": "Platform.worker ",
        "Cmd batch": "Cmd.batch ",
        "Cmd map": "Cmd.map ",
        "Cmd none": "Cmd.none ",
        "Sub batch": "Sub.batch ",
        "Sub map": "Sub.map ",
        "Sub none": "Sub.none ",
        "Process kill": "Process.kill ",
        "Process sleep": "Process.sleep ",
        "Process spawn": "Process.spawn ",
        "Result andThen": "Result.andThen ",
        "Result fromMaybe": "Result.fromMaybe ",
        "Result map": "Result.map ",
        "Result map2": "Result.map2 ",
        "Result map3": "Result.map3 ",
        "Result map4": "Result.map4 ",
        "Result map5": "Result.map5 ",
        "Result mapError": "Result.mapError ",
        "Result toMaybe": "Result.toMaybe ",
        "Result withDefault": "Result.withDefault ",
        "Result Ok": "Ok ",
        "Result Err": "Err ",
        "Set diff": "Set.diff ",
        "Set empty": "Set.empty ",
        "Set filter": "Set.filter ",
        "Set foldl": "Set.foldl ",
        "Set foldr": "Set.foldr ",
        "Set fromList": "Set.fromList ",
        "Set insert": "Set.insert ",
        "Set intersect": "Set.intersect ",
        "Set isEmpty": "Set.isEmpty ",
        "Set map": "Set.map ",
        "Set member": "Set.member ",
        "Set partition": "Set.partition ",
        "Set remove": "Set.remove ",
        "Set singleton": "Set.singleton ",
        "Set size": "Set.size ",
        "Set toList": "Set.toList ",
        "Set union": "Set.union ",
        "String all": "String.all ",
        "String any": "String.any ",
        "String append": "String.append ",
        "String concat": "String.concat ",
        "String cons": "String.cons ",
        "String contains": "String.contains ",
        "String dropLeft": "String.dropLeft ",
        "String dropRight": "String.dropRight ",
        "String endsWith": "String.endsWith ",
        "String filter": "String.filter ",
        "String foldl": "String.foldl ",
        "String foldr": "String.foldr ",
        "String fromChar": "String.fromChar ",
        "String fromFloat": "String.fromFloat ",
        "String fromInt": "String.fromInt ",
        "String fromList": "String.fromList ",
        "String indexes": "String.indexes ",
        "String indices": "String.indices ",
        "String isEmpty": "String.isEmpty ",
        "String join": "String.join ",
        "String left": "String.left ",
        "String length": "String.length ",
        "String lines": "String.lines ",
        "String map": "String.map ",
        "String pad": "String.pad ",
        "String padLeft": "String.padLeft ",
        "String padRight": "String.padRight ",
        "String repeat": "String.repeat ",
        "String replace": "String.replace ",
        "String reverse": "String.reverse ",
        "String right": "String.right ",
        "String slice": "String.slice ",
        "String split": "String.split ",
        "String startsWith": "String.startsWith ",
        "String toFloat": "String.toFloat ",
        "String toInt": "String.toInt ",
        "String toList": "String.toList ",
        "String toLower": "String.toLower ",
        "String toUpper": "String.toUpper ",
        "String trim": "String.trim ",
        "String trimLeft": "String.trimLeft ",
        "String trimRight": "String.trimRight ",
        "String uncons": "String.uncons ",
        "String words": "String.words ",
        "Task andThen": "Task.andThen ",
        "Task attempt": "Task.attempt ",
        "Task fail": "Task.fail ",
        "Task map": "Task.map ",
        "Task map2": "Task.map2 ",
        "Task map3": "Task.map3 ",
        "Task map4": "Task.map4 ",
        "Task map5": "Task.map5 ",
        "Task mapError": "Task.mapError ",
        "Task onError": "Task.onError ",
        "Task perform": "Task.perform ",
        "Task sequence": "Task.sequence ",
        "Task succeed": "Task.succeed ",
        "Tuple first": "Tuple.first ",
        "Tuple mapBoth": "Tuple.mapBoth ",
        "Tuple mapFirst": "Tuple.mapFirst ",
        "Tuple mapSecond": "Tuple.mapSecond ",
        "Tuple pair": "Tuple.pair ",
        "Tuple second": "Tuple.second ",


        # Json
        "Decode andThen": "Decode.andThen ",
        "Decode array": "Decode.array ",
        "Decode at": "Decode.at ",
        "Decode bool": "Decode.bool ",
        "Decode decodeString": "Decode.decodeString ",
        "Decode decodeValue": "Decode.decodeValue ",
        "Decode dict": "Decode.dict ",
        "Decode errorToString": "Decode.errorToString ",
        "Decode fail": "Decode.fail ",
        "Decode field": "Decode.field ",
        "Decode float": "Decode.float ",
        "Decode index": "Decode.index ",
        "Decode hint": "Decode.int ",
        "Decode keyValuePairs": "Decode.keyValuePairs ",
        "Decode lazy": "Decode.lazy ",
        "Decode list": "Decode.list ",
        "Decode map": "Decode.map ",
        "Decode map2": "Decode.map2 ",
        "Decode map3": "Decode.map3 ",
        "Decode map4": "Decode.map4 ",
        "Decode map5": "Decode.map5 ",
        "Decode map6": "Decode.map6 ",
        "Decode map7": "Decode.map7 ",
        "Decode map8": "Decode.map8 ",
        "Decode maybe": "Decode.maybe ",
        "Decode null": "Decode.null ",
        "Decode nullable": "Decode.nullable ",
        "Decode oneOf": "Decode.oneOf ",
        "Decode oneOrMore": "Decode.oneOrMore ",
        "Decode string": "Decode.string ",
        "Decode succeed": "Decode.succeed ",
        "Decode value": "Decode.value ",
        "Encode array": "Encode.array ",
        "Encode bool": "Encode.bool ",
        "Encode dict": "Encode.dict ",
        "Encode encode": "Encode.encode ",
        "Encode float": "Encode.float ",
        "Encode int": "Encode.int ",
        "Encode list": "Encode.list ",
        "Encode null": "Encode.null ",
        "Encode object": "Encode.object ",
        "Encode set": "Encode.set ",
        "Encode string": "Encode.string "

    }
)
